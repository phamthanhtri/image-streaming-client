#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def imgToText(self, urlPhoto, uid, photoId, opHandle):
    """
    Parameters:
     - urlPhoto
     - uid
     - photoId
     - opHandle
    """
    pass

  def countFaceAvatar(self, uids, opHandle):
    """
    Parameters:
     - uids
     - opHandle
    """
    pass

  def verifyAvatarDefault(self, uids, opHandle):
    """
    Parameters:
     - uids
     - opHandle
    """
    pass

  def streamDataVideo(self, frame, requestId, flag):
    """
    Parameters:
     - frame
     - requestId
     - flag
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def imgToText(self, urlPhoto, uid, photoId, opHandle):
    """
    Parameters:
     - urlPhoto
     - uid
     - photoId
     - opHandle
    """
    self.send_imgToText(urlPhoto, uid, photoId, opHandle)
    return self.recv_imgToText()

  def send_imgToText(self, urlPhoto, uid, photoId, opHandle):
    self._oprot.writeMessageBegin('imgToText', TMessageType.CALL, self._seqid)
    args = imgToText_args()
    args.urlPhoto = urlPhoto
    args.uid = uid
    args.photoId = photoId
    args.opHandle = opHandle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imgToText(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imgToText_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imgToText failed: unknown result");

  def countFaceAvatar(self, uids, opHandle):
    """
    Parameters:
     - uids
     - opHandle
    """
    self.send_countFaceAvatar(uids, opHandle)
    return self.recv_countFaceAvatar()

  def send_countFaceAvatar(self, uids, opHandle):
    self._oprot.writeMessageBegin('countFaceAvatar', TMessageType.CALL, self._seqid)
    args = countFaceAvatar_args()
    args.uids = uids
    args.opHandle = opHandle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_countFaceAvatar(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = countFaceAvatar_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "countFaceAvatar failed: unknown result");

  def verifyAvatarDefault(self, uids, opHandle):
    """
    Parameters:
     - uids
     - opHandle
    """
    self.send_verifyAvatarDefault(uids, opHandle)
    return self.recv_verifyAvatarDefault()

  def send_verifyAvatarDefault(self, uids, opHandle):
    self._oprot.writeMessageBegin('verifyAvatarDefault', TMessageType.CALL, self._seqid)
    args = verifyAvatarDefault_args()
    args.uids = uids
    args.opHandle = opHandle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_verifyAvatarDefault(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = verifyAvatarDefault_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "verifyAvatarDefault failed: unknown result");

  def streamDataVideo(self, frame, requestId, flag):
    """
    Parameters:
     - frame
     - requestId
     - flag
    """
    self.send_streamDataVideo(frame, requestId, flag)
    self.recv_streamDataVideo()

  def send_streamDataVideo(self, frame, requestId, flag):
    self._oprot.writeMessageBegin('streamDataVideo', TMessageType.CALL, self._seqid)
    args = streamDataVideo_args()
    args.frame = frame
    args.requestId = requestId
    args.flag = flag
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_streamDataVideo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = streamDataVideo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["imgToText"] = Processor.process_imgToText
    self._processMap["countFaceAvatar"] = Processor.process_countFaceAvatar
    self._processMap["verifyAvatarDefault"] = Processor.process_verifyAvatarDefault
    self._processMap["streamDataVideo"] = Processor.process_streamDataVideo

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_imgToText(self, seqid, iprot, oprot):
    args = imgToText_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imgToText_result()
    result.success = self._handler.imgToText(args.urlPhoto, args.uid, args.photoId, args.opHandle)
    oprot.writeMessageBegin("imgToText", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_countFaceAvatar(self, seqid, iprot, oprot):
    args = countFaceAvatar_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = countFaceAvatar_result()
    result.success = self._handler.countFaceAvatar(args.uids, args.opHandle)
    oprot.writeMessageBegin("countFaceAvatar", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_verifyAvatarDefault(self, seqid, iprot, oprot):
    args = verifyAvatarDefault_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = verifyAvatarDefault_result()
    result.success = self._handler.verifyAvatarDefault(args.uids, args.opHandle)
    oprot.writeMessageBegin("verifyAvatarDefault", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_streamDataVideo(self, seqid, iprot, oprot):
    args = streamDataVideo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = streamDataVideo_result()
    self._handler.streamDataVideo(args.frame, args.requestId, args.flag)
    oprot.writeMessageBegin("streamDataVideo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class imgToText_args:
  """
  Attributes:
   - urlPhoto
   - uid
   - photoId
   - opHandle
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'urlPhoto', None, None, ), # 1
    (2, TType.I32, 'uid', None, None, ), # 2
    (3, TType.I64, 'photoId', None, None, ), # 3
    (4, TType.STRUCT, 'opHandle', (zcommon.ttypes.OpHandle, zcommon.ttypes.OpHandle.thrift_spec), None, ), # 4
  )

  def __init__(self, urlPhoto=None, uid=None, photoId=None, opHandle=None,):
    self.urlPhoto = urlPhoto
    self.uid = uid
    self.photoId = photoId
    self.opHandle = opHandle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.urlPhoto = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.photoId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.opHandle = zcommon.ttypes.OpHandle()
          self.opHandle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imgToText_args')
    if self.urlPhoto is not None:
      oprot.writeFieldBegin('urlPhoto', TType.STRING, 1)
      oprot.writeString(self.urlPhoto)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 2)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.photoId is not None:
      oprot.writeFieldBegin('photoId', TType.I64, 3)
      oprot.writeI64(self.photoId)
      oprot.writeFieldEnd()
    if self.opHandle is not None:
      oprot.writeFieldBegin('opHandle', TType.STRUCT, 4)
      self.opHandle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imgToText_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TOCRResult, TOCRResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TOCRResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imgToText_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class countFaceAvatar_args:
  """
  Attributes:
   - uids
   - opHandle
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uids', (TType.I32,None), None, ), # 1
    (2, TType.STRUCT, 'opHandle', (zcommon.ttypes.OpHandle, zcommon.ttypes.OpHandle.thrift_spec), None, ), # 2
  )

  def __init__(self, uids=None, opHandle=None,):
    self.uids = uids
    self.opHandle = opHandle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uids = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = iprot.readI32();
            self.uids.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.opHandle = zcommon.ttypes.OpHandle()
          self.opHandle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('countFaceAvatar_args')
    if self.uids is not None:
      oprot.writeFieldBegin('uids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.uids))
      for iter31 in self.uids:
        oprot.writeI32(iter31)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.opHandle is not None:
      oprot.writeFieldBegin('opHandle', TType.STRUCT, 2)
      self.opHandle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class countFaceAvatar_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TAvatarFaceResult, TAvatarFaceResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TAvatarFaceResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('countFaceAvatar_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyAvatarDefault_args:
  """
  Attributes:
   - uids
   - opHandle
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uids', (TType.I32,None), None, ), # 1
    (2, TType.STRUCT, 'opHandle', (zcommon.ttypes.OpHandle, zcommon.ttypes.OpHandle.thrift_spec), None, ), # 2
  )

  def __init__(self, uids=None, opHandle=None,):
    self.uids = uids
    self.opHandle = opHandle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uids = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readI32();
            self.uids.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.opHandle = zcommon.ttypes.OpHandle()
          self.opHandle.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyAvatarDefault_args')
    if self.uids is not None:
      oprot.writeFieldBegin('uids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.uids))
      for iter38 in self.uids:
        oprot.writeI32(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.opHandle is not None:
      oprot.writeFieldBegin('opHandle', TType.STRUCT, 2)
      self.opHandle.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class verifyAvatarDefault_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TAvatarDefaultResult, TAvatarDefaultResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TAvatarDefaultResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('verifyAvatarDefault_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class streamDataVideo_args:
  """
  Attributes:
   - frame
   - requestId
   - flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'frame', None, None, ), # 1
    (2, TType.I64, 'requestId', None, None, ), # 2
    (3, TType.I32, 'flag', None, None, ), # 3
  )

  def __init__(self, frame=None, requestId=None, flag=None,):
    self.frame = frame
    self.requestId = requestId
    self.flag = flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.frame = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.requestId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('streamDataVideo_args')
    if self.frame is not None:
      oprot.writeFieldBegin('frame', TType.STRING, 1)
      oprot.writeString(self.frame)
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.I64, 2)
      oprot.writeI64(self.requestId)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.I32, 3)
      oprot.writeI32(self.flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class streamDataVideo_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('streamDataVideo_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
