#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ECode:
  C_SUCCESS = 0
  C_FAIL = 1
  EXCEPTION = 2
  NULL_PTR = 3
  INVALID_PARAM = 4
  INVALID_DATA = 5
  INVALID_OPERATION = 6
  NOT_FOUND = 7
  OUT_RANGE = 8
  NOT_EXIST = 9
  ALREADY_EXIST = 10
  C_EMPTY = 11
  UNSUPPORTED = 12
  UNLOADED = 13
  TIMEOUT = 14
  OVER_FLOW = 15
  UNDER_FLOW = 16
  NOT_SERVE = 17
  NOT_PERMIT = 18
  NOT_ALLOW = 19
  UNREADABLE = 20
  UNWRITABLE = 21
  WRONG_AUTH = 22
  NOT_CONNECTED = 23
  BAD_CONNECTION = 24
  LOW_MEM = 25
  LOW_DISK_SPACE = 26
  REACH_MAX = 27
  NOT_OPENED = 28
  INVALID_HDR = 29
  NOT_FIT = 30
  NOT_MATCHED = 31
  END_FILE = 32
  UNCHANGED = 33
  DUPLICATED = 34
  NO_CONNECTION = 35

  _VALUES_TO_NAMES = {
    0: "C_SUCCESS",
    1: "C_FAIL",
    2: "EXCEPTION",
    3: "NULL_PTR",
    4: "INVALID_PARAM",
    5: "INVALID_DATA",
    6: "INVALID_OPERATION",
    7: "NOT_FOUND",
    8: "OUT_RANGE",
    9: "NOT_EXIST",
    10: "ALREADY_EXIST",
    11: "C_EMPTY",
    12: "UNSUPPORTED",
    13: "UNLOADED",
    14: "TIMEOUT",
    15: "OVER_FLOW",
    16: "UNDER_FLOW",
    17: "NOT_SERVE",
    18: "NOT_PERMIT",
    19: "NOT_ALLOW",
    20: "UNREADABLE",
    21: "UNWRITABLE",
    22: "WRONG_AUTH",
    23: "NOT_CONNECTED",
    24: "BAD_CONNECTION",
    25: "LOW_MEM",
    26: "LOW_DISK_SPACE",
    27: "REACH_MAX",
    28: "NOT_OPENED",
    29: "INVALID_HDR",
    30: "NOT_FIT",
    31: "NOT_MATCHED",
    32: "END_FILE",
    33: "UNCHANGED",
    34: "DUPLICATED",
    35: "NO_CONNECTION",
  }

  _NAMES_TO_VALUES = {
    "C_SUCCESS": 0,
    "C_FAIL": 1,
    "EXCEPTION": 2,
    "NULL_PTR": 3,
    "INVALID_PARAM": 4,
    "INVALID_DATA": 5,
    "INVALID_OPERATION": 6,
    "NOT_FOUND": 7,
    "OUT_RANGE": 8,
    "NOT_EXIST": 9,
    "ALREADY_EXIST": 10,
    "C_EMPTY": 11,
    "UNSUPPORTED": 12,
    "UNLOADED": 13,
    "TIMEOUT": 14,
    "OVER_FLOW": 15,
    "UNDER_FLOW": 16,
    "NOT_SERVE": 17,
    "NOT_PERMIT": 18,
    "NOT_ALLOW": 19,
    "UNREADABLE": 20,
    "UNWRITABLE": 21,
    "WRONG_AUTH": 22,
    "NOT_CONNECTED": 23,
    "BAD_CONNECTION": 24,
    "LOW_MEM": 25,
    "LOW_DISK_SPACE": 26,
    "REACH_MAX": 27,
    "NOT_OPENED": 28,
    "INVALID_HDR": 29,
    "NOT_FIT": 30,
    "NOT_MATCHED": 31,
    "END_FILE": 32,
    "UNCHANGED": 33,
    "DUPLICATED": 34,
    "NO_CONNECTION": 35,
  }

class OpReason:
  CLI_REQ = 0
  SVR_BK = 1
  SVR_RS = 2
  SVR_WU = 3
  SVR_SYN = 4
  SVR_REP = 5
  PRX_FW = 6

  _VALUES_TO_NAMES = {
    0: "CLI_REQ",
    1: "SVR_BK",
    2: "SVR_RS",
    3: "SVR_WU",
    4: "SVR_SYN",
    5: "SVR_REP",
    6: "PRX_FW",
  }

  _NAMES_TO_VALUES = {
    "CLI_REQ": 0,
    "SVR_BK": 1,
    "SVR_RS": 2,
    "SVR_WU": 3,
    "SVR_SYN": 4,
    "SVR_REP": 5,
    "PRX_FW": 6,
  }


class ZException(TException):
  """
  Attributes:
   - error
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, error=None, message=None,):
    self.error = error
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ZException')
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.I32, 1)
      oprot.writeI32(self.error)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.error is None:
      raise TProtocol.TProtocolException(message='Required field error is unset!')
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OpHandle:
  """
  Attributes:
   - source
   - auth
   - reason
   - seq
   - fwseq
   - session
   - _selfSeq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'source', None, None, ), # 1
    (2, TType.STRING, 'auth', None, None, ), # 2
    (3, TType.I32, 'reason', None, None, ), # 3
    (4, TType.I64, 'seq', None, None, ), # 4
    (5, TType.I32, 'fwseq', None, None, ), # 5
    (6, TType.I64, 'session', None, None, ), # 6
    (7, TType.I64, '_selfSeq', None, None, ), # 7
  )

  def __init__(self, source=None, auth=None, reason=None, seq=None, fwseq=None, session=None, _selfSeq=None,):
    self.source = source
    self.auth = auth
    self.reason = reason
    self.seq = seq
    self.fwseq = fwseq
    self.session = session
    self._selfSeq = _selfSeq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.auth = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.reason = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.seq = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.fwseq = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.session = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self._selfSeq = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OpHandle')
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 1)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.auth is not None:
      oprot.writeFieldBegin('auth', TType.STRING, 2)
      oprot.writeString(self.auth)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.I32, 3)
      oprot.writeI32(self.reason)
      oprot.writeFieldEnd()
    if self.seq is not None:
      oprot.writeFieldBegin('seq', TType.I64, 4)
      oprot.writeI64(self.seq)
      oprot.writeFieldEnd()
    if self.fwseq is not None:
      oprot.writeFieldBegin('fwseq', TType.I32, 5)
      oprot.writeI32(self.fwseq)
      oprot.writeFieldEnd()
    if self.session is not None:
      oprot.writeFieldBegin('session', TType.I64, 6)
      oprot.writeI64(self.session)
      oprot.writeFieldEnd()
    if self._selfSeq is not None:
      oprot.writeFieldBegin('_selfSeq', TType.I64, 7)
      oprot.writeI64(self._selfSeq)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.source is None:
      raise TProtocol.TProtocolException(message='Required field source is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
